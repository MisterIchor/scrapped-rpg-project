extends KinematicBody2D
class_name BaseBody

var sprite_texture : Texture setget set_sprite_texture
var collision_data : CollisionDataTemplate setget set_collision_data
var col_scale : Vector2 = Vector2.ONE setget set_col_scale
var sprite_scale : Vector2 = Vector2.ONE setget set_sprite_scale
var pixel_data : PoolVector2Array = [] setget set_pixel_data

onready var collision_body : CollisionPolygon2D = ($CollisionPolygon2D as CollisionPolygon2D)
onready var sprite : Sprite = ($Sprite as Sprite)

signal collision_update
signal pixel_data_update



func _init() -> void:
	if not is_connected("collision_update", self, "_on_collision_update"):
		connect("collision_update", self, "_on_collision_update")


func _ready() -> void:
	sprite.connect("texture_changed", self, "_on_Sprite_texture_changed")



func interpolate_boundary(boundary_array : PoolVector2Array, iterations : int) -> PoolVector2Array:
	var interp_boundary : PoolVector2Array = boundary_array
	
	for i in range(iterations):
		var interp_line : Array = []
		var points_to_remove : PoolVector2Array = []
		var invert : bool = false
		
		for j in range(1, interp_boundary.size()):
			var point : Dictionary = {
			start = interp_boundary[j - 1],
			end = interp_boundary[j],
		}
			interp_line.append(point.start)
			interp_line.append(get_midpoint(point.start, point.end))
			points_to_remove.append(point.end)
		
		for j in points_to_remove:
			if j in interp_line:
				interp_line.erase(j)
		
		interp_line[0] = get_midpoint(interp_boundary[0], interp_boundary[-1])
		interp_boundary = PoolVector2Array(interp_line)
	
	return interp_boundary



func set_sprite_texture(new_texture : Texture) -> void:
	sprite_texture = new_texture
	sprite.set_texture(sprite_texture)
	emit_signal("collision_update")


func set_collision_data(new_data : CollisionDataTemplate) -> void:
	collision_data = new_data
	col_scale = collision_data.collision_scale
	emit_signal("collision_update")


func set_col_scale(new_scale : Vector2) -> void:
	col_scale = new_scale
	emit_signal("collision_update")


func set_sprite_scale(new_scale : Vector2) -> void:
	sprite_scale = new_scale
	sprite.set_scale(sprite_scale)
	emit_signal("collision_update")


func set_pixel_data(new_data : PoolVector2Array) -> void:
	pixel_data = new_data
	emit_signal("collision_update")



func get_pixel_data(pos_adjustment : Vector2, transparency_bias : float) -> PoolVector2Array:
	var data : PoolVector2Array = PoolVector2Array()
	var image : Image = sprite.texture.get_data()
	
	image.lock()
	
	for x in image.get_width():
		for y in image.get_height():
			var color : Color = image.get_pixel(x, y)
			
			if color.a >= transparency_bias:
				var pixel_pos : Vector2 = Vector2(x, y)
				
				pixel_pos += pos_adjustment
				pixel_pos -= image.get_size() / 2
				pixel_pos *= col_scale
				pixel_pos *= sprite.scale
				data.append(pixel_pos)
	
	image.unlock()
	return data


func get_boundaries() -> PoolVector2Array:
	var boundaries : Dictionary = {
		top = [],
		bottom = []
	}
	var collumns : Dictionary = {}
	
	for i in pixel_data:
		if not i.x in collumns:
			collumns[i.x] = []
		
		collumns[i.x].append(i)
	
	for i in collumns:
		boundaries.top.append(collumns[i].front())
		boundaries.bottom.append(collumns[i].back())
	
	var boundary_array : PoolVector2Array = boundaries.top
	
	boundaries.bottom.invert()
	boundary_array.append_array(boundaries.bottom)
	return boundary_array


func get_midpoint(point_one : Vector2, point_two : Vector2) -> Vector2:
	return (point_two - point_one) * 0.5 + point_one



func _on_collision_update() -> void:
	if not collision_data or pixel_data.empty():
		return
	
	var boundaries : PoolVector2Array = get_boundaries()
	
	if collision_data.interpolation_iterations:
		boundaries = interpolate_boundary(boundaries, collision_data.interpolation_iterations)
	
	collision_body.polygon = boundaries


func _on_pixel_data_update() -> void:
	if not collision_data or sprite.texture:
		return
	
	pixel_data = get_pixel_data(collision_data.position_adjustment, collision_data.transparency_bias)


func _on_Sprite_texture_changed() -> void:
	if not collision_data:
		yield(self, "collision_update")
	
	pixel_data = get_pixel_data(collision_data.position_adjustment, collision_data.transparency_bias)
	emit_signal("collision_update")
